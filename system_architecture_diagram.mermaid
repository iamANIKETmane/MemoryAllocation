graph TB
    subgraph "Application Layer"
        APP["`**Main Application**
        - Game Engine
        - Server
        - Real-time System`"]
        DEMO["`**Demo/Test Program**
        main.cpp`"]
    end
    
    subgraph "Public API Layer"
        IFACE["`**IAllocator Interface**
        📋 *Abstract Base Class*
        ┌─────────────────────┐
        │ + allocate()        │
        │ + deallocate()      │
        │ + owns()            │
        │ + get_stats()       │
        │ + validate_heap()   │
        └─────────────────────┘`"]
        
        FACTORY["`**AllocatorFactory**
        🏭 *Factory Pattern*
        ┌─────────────────────┐
        │ + createPool()      │
        │ + createBuddy()     │
        │ + createSlab()      │
        │ + createStandard()  │
        └─────────────────────┘`"]
    end
    
    subgraph "Allocator Implementations"
        POOL["`**FixedPoolAllocator**
        🎯 *Your Current Implementation*
        ┌─────────────────────────┐
        │ **Memory Layout:**      │
        │ [Block0][Block1][...]   │
        │ **Free List:**          │
        │ Head → Block3 → Block7  │
        │ **Operations:**         │
        │ • O(1) allocation       │
        │ • O(1) deallocation     │
        │ • Bitmap/FreeList mgmt  │
        └─────────────────────────┘`"]
        
        BUDDY["`**BuddyAllocator**
        🌳 *Binary Tree Structure*
        ┌─────────────────────────┐
        │ **Tree Structure:**     │
        │      [1024KB]           │
        │     /        \\          │
        │ [512KB]    [512KB]      │
        │ **Operations:**         │
        │ • Power-of-2 sizes      │
        │ • Split/Merge blocks    │
        │ • O(log n) complexity   │
        └─────────────────────────┘`"]
        
        SLAB["`**SlabAllocator**
        📦 *Object-Specific Pools*
        ┌─────────────────────────┐
        │ **Slab Layout:**        │
        │ [Obj][Obj][Obj][Free]   │
        │ **Cache Management:**   │
        │ • Type-specific pools   │
        │ • Constructor calls     │
        │ • CPU cache friendly    │
        └─────────────────────────┘`"]
        
        STD["`**StandardAllocator**
        🔧 *Baseline Wrapper*
        ┌─────────────────────────┐
        │ **Wraps:**              │
        │ • malloc/free           │
        │ • std::allocator        │
        │ **Purpose:**            │
        │ • Performance baseline  │
        │ • Compatibility layer   │
        └─────────────────────────┘`"]
    end
    
    subgraph "Support Systems"
        STATS["`**Statistics Engine**
        📊 *Performance Monitoring*
        ┌─────────────────────────┐
        │ • Allocation counts     │
        │ • Timing measurements   │
        │ • Memory usage peaks    │
        │ • Fragmentation stats   │
        └─────────────────────────┘`"]
        
        DEBUG["`**Debug System**
        🐛 *Memory Safety*
        ┌─────────────────────────┐
        │ • Leak detection        │
        │ • Corruption checking   │
        │ • Double-free detection │
        │ • Poison patterns       │
        └─────────────────────────┘`"]
        
        THREAD["`**Thread Safety**
        🔒 *Concurrency Control*
        ┌─────────────────────────┐
        │ • Atomic operations     │
        │ • Lock-free algorithms  │
        │ • Memory barriers       │
        │ • CAS operations        │
        └─────────────────────────┘`"]
    end
    
    subgraph "Utility Layer"
        UTILS["`**Memory Utils**
        🛠️ *Helper Functions*
        ┌─────────────────────────┐
        │ • Alignment functions   │
        │ • Pointer arithmetic    │
        │ • Bit manipulation      │
        │ • Platform specifics    │
        └─────────────────────────┘`"]
        
        TIMER["`**High-Res Timer**
        ⏱️ *Performance Measurement*
        ┌─────────────────────────┐
        │ • Nanosecond precision  │
        │ • RAII timing           │
        │ • Statistical analysis  │
        └─────────────────────────┘`"]
    end
    
    subgraph "Testing Framework"
        UNIT["`**Unit Tests**
        ✅ *Individual Components*
        ┌─────────────────────────┐
        │ • Allocator correctness │
        │ • Edge case handling    │
        │ • Error conditions      │
        └─────────────────────────┘`"]
        
        BENCH["`**Benchmark Suite**
        🏃 *Performance Testing*
        ┌─────────────────────────┐
        │ • Speed comparisons     │
        │ • Memory patterns       │
        │ • Multi-threaded tests  │
        │ • Fragmentation analysis│
        └─────────────────────────┘`"]
        
        STRESS["`**Stress Tests**
        💪 *Reliability Testing*
        ┌─────────────────────────┐
        │ • Long-running tests    │
        │ • Memory exhaustion     │
        │ • Concurrent access     │
        │ • Error injection       │
        └─────────────────────────┘`"]
    end
    
    %% Relationships
    APP --> IFACE
    DEMO --> IFACE
    
    IFACE --> FACTORY
    FACTORY --> POOL
    FACTORY --> BUDDY
    FACTORY --> SLAB
    FACTORY --> STD
    
    POOL --> STATS
    POOL --> DEBUG
    POOL --> THREAD
    POOL --> UTILS
    POOL --> TIMER
    
    BUDDY --> STATS
    BUDDY --> DEBUG
    BUDDY --> THREAD
    BUDDY --> UTILS
    
    SLAB --> STATS
    SLAB --> DEBUG
    SLAB --> THREAD
    SLAB --> UTILS
    
    STD --> STATS
    
    UNIT --> POOL
    UNIT --> BUDDY
    UNIT --> SLAB
    UNIT --> STD
    
    BENCH --> IFACE
    STRESS --> IFACE
    
    %% Styling
    classDef application fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef interface fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef allocator fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef support fill:#fff8e1,stroke:#e65100,stroke-width:2px
    classDef utility fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef testing fill:#f1f8e9,stroke:#33691e,stroke-width:2px
    
    class APP,DEMO application
    class IFACE,FACTORY interface
    class POOL,BUDDY,SLAB,STD allocator
    class STATS,DEBUG,THREAD support
    class UTILS,TIMER utility
    class UNIT,BENCH,STRESS testing